                              GLGRAB

GLGrab is an OpenGL image grabber. This package contains
 - The grabber plugin itself and script for easy dealing with it.
 - FFmpeg support for GLGrab as video input.

 * HOW TO INSTALL *

You will need CMake and development packages of FFmpeg and OpenGL with GLX.
Build & install is pretty standard for CMake:

  cmake <path to glgrab sources> && make install

Though it's better to wrap it in your distro package.

 * HOW IT WORKS *

GLGrab injects special plugin into an OpenGL application. That library catches
every rendered frame just before it goes to the display. Frames are stored
in a shared memory buffer visible as a file. You may take frames from that
buffer with ffmpeg, encode, and store into a file in virtually any format.

 * HOW TO RUN *

Simply type

  glgrab app

GLGrab will print path to file where it will store grabbed frames, and start
the app. Remember it, you will need to pass it to ffmpeg as an input file.
File won't be created until the application starts actual OpenGL rendering.

There are several options for fine tuning. With '-o path' you change the path
to glgrab buffer. It's better to place it on tmpfs. By default, file is deleted
after the application exits. If you want to keep it for some reason, tell -k.

Using -b option you may change size of the buffer. Default is 256 MiB. Larger
buffer hold more frames and thus decreases the chance of frame dropping in
case of accidental lags in the encoder (i.e. ffmpeg).

(Don't read this paragraph.) The last option -f is to minimize address space
pollution caused by glgrab. Perhaps it may be needed only on 32-bit systems.
This option limits maximum size of single frame measured in megapixels (so,
1280x720 is approximately 1 megapixel, round up your calculations). Larger
frames may be silently dropped. However they may succeed, don't rely on this
limit. Internally, frame size limit is size of the buffer subregion used to
warp the linear buffer into a circular buffer. Actual memory consumed by glgrab
is still limited by buffer size itself. But consumed address space is buffer
size plus maximum frame size.

 * HOW TO SAVE VIDEO *

The glgrab-av behind ffmpeg provides the same interface as vanilla ffmpeg.
Refer to FFmpeg's manuals at this point. Example:

  glgrab-av ffmpeg -vsync vfr -f glgrab -r 30 -s 1024x768 -i <glgrab buffer> \
      -c:v libx264 -qp 0 video.mov

FFmpeg doesn't deal with multiple CPUs very well. In an attempt to grab large
and/or high rate video you may be limited by speed of single CPU core. To
overtake this limitation use GLGrab's built-in colorspace conversion function.
It's fast though still single-threaded. The same example eating 4 CPU cores:

  glgrab-av ffmpeg -vsync vfr -f glgrab -r 30 -s 1024x768 -pix_fmt yuv420p \
      -i <glgrab buffer> -c:v libx264 -qp 0 -threads 4 video.mov

The -pix_fmt option enables faster conversion, so that slower ffmpeg's function
won't be needed. Only yuv420p output format is supported. Depending on whole
pipeline configuration ffmpeg may automatically switch GLGrab input into the
yuv420p format.
